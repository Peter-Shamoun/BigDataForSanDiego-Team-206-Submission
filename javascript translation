const fs = require('fs');

class MedicalApp {
    constructor(socket, audioIO) {
        this.socket = socket;
        this.audioIO = audioIO;
        this.audioThread = null;  // Placeholder if there's threading logic
    }

    viewPrescriptions(userId) {
        console.log(`Checking prescription routine for ${userId}`);
        const prescriptions = ['adderall', 'insulin', 'naxprozen', 'amoxicillin'];
        const selectedPrescription = prescriptions[Math.floor(Math.random() * prescriptions.length)];

        fs.appendFileSync('prescription_log.txt', `${userId}, ${selectedPrescription}\n`);

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: 'Checking prescriptions!'
            }
        });

        this.socket.send({
            type: 'response.create',
            response: {
                modalities: ['text'],
                instructions: `Tell the user their ${selectedPrescription} prescription is available for pickup.`
            }
        });
    }

    scheduleAppointments(userId, datetime, reason, doctor) {
        console.log(`Checking for available appointments for ${datetime}`);
        fs.appendFileSync('appointments_log.txt', `${userId}, ${datetime}, ${reason}, ${doctor}\n`);

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: 'Successfully scheduled appointment'
            }
        });

        this.socket.send({
            type: 'response.create',
            response: {
                modalities: ['text'],
                instructions: `Your appointment has been successfully scheduled for ${datetime} with Dr. ${doctor}. Thank you!`
            }
        });
    }

    nearestHospital(userId) {
        console.log('Searching for hospital nearest to your location');
        const hospitals = [
            'Sharp Chula Vista Medical Center',
            'Sharp Coronado Hospital',
            'Sharp Grossmont Hospital',
            'Sharp Memorial Hospital',
            'Sharp Mesa Vista Hospital'
        ];
        const selectedHospital = hospitals[Math.floor(Math.random() * hospitals.length)];

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: 'Successfully located hospital'
            }
        });
    }

    viewUpcomingAppointments(userId) {
        console.log(`Searching for upcoming appointments for user: ${userId}`);
        const upcomingAppointments = [];

        const fileData = fs.readFileSync('appointments_log.txt', 'utf-8');
        const lines = fileData.split('\n');
        lines.forEach(line => {
            const [entryUserId, datetime, reason, doctor] = line.split(', ');
            if (entryUserId === userId) {
                upcomingAppointments.push({ datetime, reason, doctor });
            }
        });

        if (upcomingAppointments.length > 0) {
            console.log(`Found ${upcomingAppointments.length} upcoming appointments for user ${userId}.`);
        } else {
            console.log(`No upcoming appointments found for user ${userId}.`);
        }

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: `Found ${upcomingAppointments.length} upcoming appointments for you.`
            }
        });

        if (upcomingAppointments.length > 0) {
            const upcoming = upcomingAppointments[0];  // Assuming we notify about the first one
            this.socket.send({
                type: 'response.create',
                response: {
                    modalities: ['text'],
                    instructions: `You have an appointment on ${upcoming.datetime} with Dr. ${upcoming.doctor} for ${upcoming.reason}`
                }
            });
        }
    }

    cancelAppointment(userId, datetime, doctor) {
        console.log(`Cancelling appointments for ${userId} on ${datetime} with ${doctor}`);

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: 'Successfully cancelled appointment'
            }
        });

        this.socket.send({
            type: 'response.create',
            response: {
                modalities: ['text'],
                instructions: `Your appointment on ${datetime} with Dr. ${doctor} has been successfully cancelled`
            }
        });
    }

    relayMessage(userId, doctor, message) {
        console.log(`Relaying message to ${doctor}`);
        fs.appendFileSync('message_log.txt', `${userId}, ${doctor}, ${message}\n`);

        this.socket.send({
            type: 'conversation.item.create',
            item: {
                type: 'function_call_output',
                function_call_output: 'Successfully relayed message'
            }
        });

        this.socket.send({
            type: 'response.create',
            response: {
                modalities: ['text'],
                instructions: `Your message to Dr. ${doctor} has been sent. Thank you!`
            }
        });
    }

    stop() {
        console.log('Shutting down Realtime session.');

        // Signal threads to stop
        this.audioIO._stop_event.set();  // Assuming this exists in the context
        this.socket.kill();

        // Stop audio streams
        this.audioIO.stopStreams();

        // Join threads to ensure they exit cleanly
        if (this.audioThread) {
            this.audioThread.join();
            console.log('Audio processing thread terminated.');
        }
    }
}

module.exports = MedicalApp;



